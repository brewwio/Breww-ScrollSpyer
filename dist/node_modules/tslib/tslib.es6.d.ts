declare function __extends(d: any, b: any): void;
declare function __rest(s: any, e: any): {};
declare function __decorate(decorators: any, target: any, key: any, desc: any, ...args: any[]): any;
declare function __param(paramIndex: any, decorator: any): (target: any, key: any) => void;
declare function __esDecorate(ctor: any, descriptorIn: any, decorators: any, contextIn: any, initializers: any, extraInitializers: any): void;
declare function __runInitializers(thisArg: any, initializers: any, value: any, ...args: any[]): any;
declare function __propKey(x: any): string | symbol;
declare function __setFunctionName(f: any, name: any, prefix: any): any;
declare function __metadata(metadataKey: any, metadataValue: any): any;
declare function __awaiter(thisArg: any, _arguments: any, P: any, generator: any): any;
declare function __generator(thisArg: any, body: any): {
    next: (v: any) => any;
    throw: (v: any) => any;
    return: (v: any) => any;
};
declare function __exportStar(m: any, o: any): void;
declare function __values(o: any): any;
declare function __read(o: any, n: any): any;
/** @deprecated */
declare function __spread(...args: any[]): any[];
/** @deprecated */
declare function __spreadArrays(...args: any[]): any[];
declare function __spreadArray(to: any, from: any, pack: any, ...args: any[]): any;
declare function __await(v: any): __await;
declare class __await {
    constructor(v: any);
    v: any;
}
declare function __asyncGenerator(thisArg: any, _arguments: any, generator: any): {};
declare function __asyncDelegator(o: any): {};
declare function __asyncValues(o: any): any;
declare function __makeTemplateObject(cooked: any, raw: any): any;
declare function __importStar(mod: any): any;
declare function __importDefault(mod: any): any;
declare function __classPrivateFieldGet(receiver: any, state: any, kind: any, f: any): any;
declare function __classPrivateFieldSet(receiver: any, state: any, value: any, kind: any, f: any): any;
declare function __classPrivateFieldIn(state: any, receiver: any): any;
declare function __assign(...args: any[]): any;
declare function __createBinding(o: any, m: any, k: any, k2: any): void;
declare namespace _default {
    export { __extends };
    export { __assign };
    export { __rest };
    export { __decorate };
    export { __param };
    export { __metadata };
    export { __awaiter };
    export { __generator };
    export { __createBinding };
    export { __exportStar };
    export { __values };
    export { __read };
    export { __spread };
    export { __spreadArrays };
    export { __spreadArray };
    export { __await };
    export { __asyncGenerator };
    export { __asyncDelegator };
    export { __asyncValues };
    export { __makeTemplateObject };
    export { __importStar };
    export { __importDefault };
    export { __classPrivateFieldGet };
    export { __classPrivateFieldSet };
    export { __classPrivateFieldIn };
}
export { _default as default, __extends, __rest, __decorate, __param, __esDecorate, __runInitializers, __propKey, __setFunctionName, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet, __classPrivateFieldIn, __assign, __createBinding };
